call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'amix/open_file_under_cursor.vim'
Plug 'topin27/taskpaper.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-fugitive'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'aklt/plantuml-syntax'
Plug 'mkitt/tabline.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Asheq/close-buffers.vim'
Plug 'antiagainst/vim-tablegen'
call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype plugin on

syntax on
syntax enable
" set nu
set rnu
set is
set ruler
set ai
set hlsearch
set noet
set ts=8
set mouse=
set ls=2
set conceallevel=0
set wildmenu
set completeopt=menuone
" set iskeyword+=-
set nocompatible
set backspace=indent,eol,start

let maplocalleader = ','

cnoremap <C-G> <C-F>
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

nmap = <C-w>=
nmap <TAB> <C-w>w
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l
nmap <C-Down> <C-W>j
nmap <C-Up> <C-W>k
nmap <C-Left> <C-W>h
nmap <C-Right> <C-W>l
nmap <LocalLeader>q :b#<bar>bd#<CR><C-W><C-P>
nmap QQ :q<CR><C-W><C-P>
nmap <Leader>tp :setlocal paste!<cr>
nmap <Leader>tc :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=2"<CR>
" nmap <LocalLeader>w :w<CR>
nmap s :w<CR>
nmap <F5> :w<CR> :!<Up><CR>
vmap <Leader>pw :w! ~/.vim/clipboard.txt
nmap <Leader>pr :r ~/.vim/clipboard.txt

inoremap <C-E> <End>
inoremap <C-A> <Home>
inoremap <C-F> <Right>
inoremap <C-B> <Left>

nnoremap g] g<C-]>

autocmd FileType qf nnoremap <silent><buffer> q :q<cr>

if !exists('g:my_lasttab')
  let g:my_lasttab = 1
endif
nmap <Leader>tt :exe "tabn ".g:my_lasttab<CR>
au TabLeave * let g:my_lasttab = tabpagenr()

packadd! matchit


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ------------
" For coc-nvim
" ------------

let g:coc_global_extensions = [
			\ 'coc-json',
			\ 'coc-tsserver',
			\ 'coc-java',
			\ 'coc-pyright',
			\ 'coc-snippets',
			\ '@yaegassy/coc-marksman',
			\ ]

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" " Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-@> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

function! s:goto_tag(tagkind) abort
  let tagname = expand('<cWORD>')
  let winnr = winnr()
  let pos = getcurpos()
  let pos[0] = bufnr()

  if CocAction('jump' . a:tagkind)
    call settagstack(winnr, { 
      \ 'curidx': gettagstack()['curidx'], 
      \ 'items': [{'tagname': tagname, 'from': pos}] 
      \ }, 't')
  endif
endfunction

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
nmap gd :call <SID>goto_tag("Definition")<CR>
nmap gi :call <SID>goto_tag("Implementation")<CR>
nmap gr :call <SID>goto_tag("References")<CR>
nmap gy :call <SID>goto_tag("TypeDefinition")<CR>
nnoremap <silent> gK :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <LocalLeader>f  <Plug>(coc-format-selected)
nmap <LocalLeader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <LocalLeader>a  <Plug>(coc-codeaction-selected)
nmap <LocalLeader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <LocalLeader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <LocalLeader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <LocalLeader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Add `:CocFormat` command to format current buffer.
command! -nargs=0 CocFormat :call CocAction('format')
" Add `:CocFold` command to fold current buffer.
command! -nargs=? CocFold :call     CocAction('fold', <f-args>)
" Add `:CocOR` command for organize imports of the current buffer.
command! -nargs=0 CocOR   :call     CocAction('runCommand', 'editor.action.organizeImport')
nmap <LocalLeader>ci :CocOR<CR>

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <LocalLeader>ca  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <LocalLeader>ce  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <LocalLeader>cc  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <LocalLeader>co  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <LocalLeader>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <LocalLeader>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <LocalLeader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <LocalLeader>cp  :<C-u>CocListResume<CR>

" For coc-snippets
imap <C-d> <Plug>(coc-snippets-expand)
let g:coc_snippet_next = '<c-f>'
let g:coc_snippet_prev = '<c-b>'


" ------------
" For NERDTree
" ------------

let g:NERDTreeIgnore = ['\.pyc$', '\~$'] "ignore files in NERDTree
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeMapHelp = '<F1>'
let g:NERDTreeMapJumpNextSibling = '<C-n>'
let g:NERDTreeMapJumpPrevSibling = '<C-p>'
map <F2> :NERDTreeToggle<CR>

" ----------
" For tagbar
" ----------

let g:tagbar_right = 1
let g:tagbar_autofocus = 1
let g:tagbar_type_markdown = {
	\ 'ctagstype' : 'markdown',
	\ 'kinds' : [
		\ 'h:headings',
		\ 'f:footnotes',
	\ ],
	\ 'sort' : 0
\ }
let g:tagbar_type_taskpaper = {
	\ 'ctagstype' : 'taskpaper',
	\ 'kinds' : [
		\ 'p:projects',
	\ ],
	\ 'sort' : 0
\ }
map <F3> :TagbarToggle<CR>

" -----------------
" For close-buffers
" -----------------

nnoremap <silent> <LocalLeader>Q :Bdelete hidden<CR>

" -------
" For fzf
" -------

let g:fzf_command_prefix = "Fzf"
nnoremap <silent> <Leader>f :FzfFiles<CR>
nnoremap <silent> <Leader>b :FzfBuffers<CR>
nnoremap <silent> <Leader>w :FzfWindows<CR>
nnoremap <silent> <Leader>m :FzfMarks<CR>
nnoremap <silent> <Leader>jt :FzfTags<CR>
nnoremap <silent> <Leader>ji :FzfBTags<CR>
nnoremap <silent> <leader>jg :FzfTags <C-r><C-w><CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_preview_window = ['right:50%:hidden', 'ctrl-/']

command! -bang -nargs=* -complete=dir FzfMyAg
  \ call fzf#vim#grep(
    \ "ag --nogroup --column --color " . join([<f-args>], ' '),
    \ 1,
    \ fzf#vim#with_preview(),
    \ 0)

nnoremap <Leader>ss :FzfMyAg! "" -sw<Left><Left><Left><Left><Left>
autocmd FileType python nnoremap <LocalLeader>ss :FzfMyAg! --python "" -sw<Left><Left><Left><Left><Left>
autocmd FileType c  nnoremap <LocalLeader>ss :FzfMyAg! --cc "" -sw<Left><Left><Left><Left><Left>
autocmd FileType cpp  nnoremap <LocalLeader>ss :FzfMyAg! --cpp "" -sw<Left><Left><Left><Left><Left>
autocmd FileType ocaml  nnoremap <LocalLeader>ss :FzfMyAg! --ocaml "" -sw<Left><Left><Left><Left><Left>
autocmd FileType markdown  nnoremap <LocalLeader>ss :FzfMyAg! --markdown "" -sw<Left><Left><Left><Left><Left>
autocmd FileType java  nnoremap <LocalLeader>ss :FzfMyAg! --java "" -sw<Left><Left><Left><Left><Left>
autocmd FileType javascript  nnoremap <LocalLeader>ss :FzfMyAg! --js "" -sw<Left><Left><Left><Left><Left>
autocmd FileType makefile nnoremap <LocalLeader>ss :FzfMyAg! --make "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sp :FzfMyAg! --python "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sc :FzfMyAg! --cc "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sz :FzfMyAg! --cpp "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>so :FzfMyAg! --ocaml "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sm :FzfMyAg! --markdown "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sj :FzfMyAg! --java "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sa :FzfMyAg! --js "" -sw<Left><Left><Left><Left><Left>
nnoremap <Leader>sk :FzfMyAg! --make "" -sw<Left><Left><Left><Left><Left>

" ------------
" For Fugitive
" ------------

nnoremap <Leader>gs :Git<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gb :Git blame<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gp :Git push<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gg :Git<Space>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SPECIFIC PLUGINS & SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ---------
" Taskpaper
" ---------
autocmd FileType taskpaper setlocal bri
autocmd FileType taskpaper nmap <buffer> <LocalLeader>t <Plug>TaskPaperToggleTodo
autocmd FileType taskpaper nmap <buffer> <LocalLeader>s <Plug>TaskPaperToggleStart
autocmd FileType taskpaper nmap <buffer> <LocalLeader>d <Plug>TaskPaperToggleDone
autocmd FileType taskpaper nmap <buffer> <LocalLeader>c <Plug>TaskPaperToggleCancelled

" -------
" C & C++
" -------

autocmd FileType cpp setlocal ts=2 sts=2 et sw=2

" ----
" Java
" ----

autocmd FileType java setlocal ts=4 sts=4 et sw=4

" ------
" Python
" ------

autocmd FileType python setlocal ts=4 sts=4 et sw=4

" -----
" OCaml
" -----

" " For ocaml
" let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
" execute "set rtp+=" . g:opamshare . "/merlin/vim"
" autocmd FileType ocaml nmap <leader>gd :MerlinLocate<CR>
" autocmd FileType ocaml map <F3> :MerlinOutline<CR>

" ---------------
" Markdown.pandoc
" ---------------

augroup pandoc_syntax
    au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
augroup END

" autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd FileType markdown.pandoc setlocal ts=4 sts=4 et sw=4 conceallevel=0 formatoptions+=mM bri
autocmd FileType markdown.pandoc nmap <LocalLeader>ih :s/^#\([# ]\+\)/##\1/c<Home>
autocmd FileType markdown.pandoc nmap <LocalLeader>dh :s/^##\([# ]\+\)/#\1/c<Home>

" ----------
" JavaScript
" ----------
autocmd FileType javascript setlocal ts=2 sts=2 et sw=2

" --------
" Plantuml
" --------
let g:plantuml_executable_script = 0
